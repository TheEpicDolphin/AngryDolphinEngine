declarations = single_declaration , { single_declaration } ;

single_declaration = ( fully_specified_type | fully_specified_type , identifier | fully_specified_type , identifier , array_specifier ) , ';' ;

fully_specified_type = [ type_qualifier ] , type_specifier ;

type_qualifier = single_type_qualifier , { single_type_qualifier } ;

single_type_qualifier = 
	storage_qualifier | 
	layout_qualifier | 
	precision_qualifier | 
	interpolation_qualifier | 
	invariant_qualifier | 
	precise_qualifier ;

storage_qualifier =
	'const' |
	'in' |
	'out' |
	'inout' |
	'centroid' |
	'patch' |
	'sample' |
	'uniform' |
	'buffer' |
	'shared' |
	'coherent' |
	'volatile' |
	'restrict' |
	'readonly' |
	'writeonly' ;

layout_qualifier = 'layout' , '(' , layout_qualifier_id_list , ')' ;

layout_qualifier_id_list = layout_qualifier_id , { ',' , layout_qualifier_id } ;

layout_qualifier_id =
	identifier |
	identifier , whitespace, '=' , whitespace , constant_expression |
	'shared' ;

precision_qualifier =
	'highp' |
	'mediump' |
	'lowp' ;

interpolation_qualifier =
	'smooth' |
	'flat' |
	'nonperspective' ;

invariant_qualifier = 'invariant' ;

precise_qualifier = 'precise' ;

type_specifier = type_specifier_nonarray , [ array_specifier ] ;

array_specifier = array_specifier_1d , { array_specifier_1d } ;

array_specifier_1d = '[' , unsigned_integer , ']' ;

type_specifier_nonarray =
	'void' |
	'float' |
	'double' |
	'int' |
	'uint' |
	'bool' |
	'vec2' |
	'vec3' |
	'vec4' |
	'dvec2' |
	'dvec3' |
	'dvec4' |
	'bvec2' |
	'bvec3' |
	'bvec4' |
	'ivec2' |
	'ivec3' |
	'ivec4' |
	'uvec2' |
	'uvec3' |
	'uvec4' |
	'mat2' |
	'mat3' |
	'mat4' |
	'mat2x2' |
	'mat2x3' |
	'mat2x4' |
	'mat3x2' |
	'mat3x3' |
	'mat3x4' |
	'mat4x2' |
	'mat4x3' |
	'mat4x4' |
	'dmat2' |
	'dmat3' |
	'dmat4' |
	'dmat2x2' |
	'dmat2x3' |
	'dmat2x4' |
	'dmat3x2' |
	'dmat3x3' |
	'dmat3x4' |
	'dmat4x2' |
	'dmat4x3' |
	'dmat4x4' |
	'atomic_uint' |
	'sampler2d' |
	'sampler3d' |
	'samplercube' |
	'sampler2dshadow' |
	'samplercubeshadow' |
	'sampler2darray' |
	'sampler2darrayshadow' |
	'samplercubearray' |
	'samplercubearrayshadow' |
	'isampler2d' |
	'isampler3d' |
	'isamplercube' |
	'isampler2darray' |
	'isamplercubearray' |
	'usampler2d' |
	'usampler3d' |
	'usamplercube' |
	'usampler2darray' |
	'usamplercubearray' |
	'sampler1d' |
	'sampler1dshadow' |
	'sampler1darray' |
	'sampler1darrayshadow' |
	'isampler1d' |
	'isampler1darray' |
	'usampler1d' |
	'usampler1darray' |
	'sampler2drect' |
	'sampler2drectshadow' |
	'isampler2drect' |
	'usampler2drect' |
	'samplerbuffer' |
	'isamplerbuffer' |
	'usamplerbuffer' |
	'sampler2dms' |
	'isampler2dms' |
	'usampler2dms' |
	'sampler2dmsarray' |
	'isampler2dmsarray' |
	'usampler2dmsarray' |
	'image2d' |
	'iimage2d' |
	'uimage2d' |
	'image3d' |
	'iimage3d' |
	'uimage3d' |
	'imagecube' |
	'iimagecube' |
	'uimagecube' |
	'imagebuffer' |
	'iimagebuffer' |
	'uimagebuffer' |
	'image1d' |
	'iimage1d' |
	'uimage1d' |
	'image1darray' |
	'iimage1darray' |
	'uimage1darray' |
	'image2drect' |
	'iimage2drect' |
	'uimage2drect' |
	'image2darray' |
	'iimage2darray' |
	'uimage2darray' |
	'imagecubearray' |
	'iimagecubearray' |
	'uimagecubearray' |
	'image2dms' |
	'iimage2dms' |
	'uimage2dms' |
	'image2dmsarray' |
	'iimage2dmsarray' |
	'uimage2dmsarray' |
	struct_specifier |
	identifier ;

struct_specifier = 'struct' identifier '{' struct_member_list '}' ;

struct_member_list = struct_member_declaration , { struct_member_declaration } ;

struct_member_declaration = type_specifier struct_member_declarators ';' ;

struct_member_declarators = struct_member_declarator , { ',' , struct_member_declarator } ;

struct_member_declarator = identifier , [ array_specifier ] ;

unsigned_integer = digit , { digit } ;

digit = 
	'0' |
	'1' |
	'2' |
	'3' |
	'4' |
	'5' |
	'6' |
	'7' |
	'8' |
	'9' ;

identifier = ( letter | '_' ) , { letter | digit | '_' } ;

letter =
	'A' |
	'B' |
	'C' |
	'D' |
	'E' |
	'F' |
	'G' |
	'H' |
	'I' |
	'J' |
	'K' |
	'L' |
	'M' |
	'N' |
	'O' |
	'P' |
	'Q' |
	'R' |
	'S' |
	'T' |
	'U' |
	'V' |
	'W' |
	'X' |
	'Y' |
	'Z' |
	'a' |
	'b' |
	'c' |
	'd' |
	'e' |
	'f' |
	'g' |
	'h' |
	'i' |
	'j' |
	'k' |
	'l' |
	'm' |
	'n' |
	'o' |
	'p' |
	'q' |
	'r' |
	's' |
	't' |
	'u' |
	'v' |
	'w' |
	'x' |
	'y' |
	'z' ;

whitespace = { ' ' | '\t' | '\n' | '\v' | '\f' | '\r' } ;
